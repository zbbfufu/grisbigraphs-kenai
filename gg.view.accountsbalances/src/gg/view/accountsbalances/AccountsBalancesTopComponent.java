/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gg.view.accountsbalances;

import gg.application.components.FieldsVisibility;
import gg.db.datamodel.Datamodel;
import gg.db.datamodel.SearchFilter;
import gg.db.entities.Account;
import gg.db.entities.Currency;
import gg.db.entities.MoneyContainer;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.netbeans.swing.outline.DefaultOutlineModel;
import org.netbeans.swing.outline.OutlineModel;
import org.netbeans.swing.outline.RowModel;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.windows.TopComponentGroup;

/**
 * Top component which displays something.
 */
final class AccountsBalancesTopComponent extends TopComponent implements LookupListener {

    private static AccountsBalancesTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "gg/resources/icons/AccountsBalances.png";
    private static final String PREFERRED_ID = "AccountsBalancesTopComponent";
    private Lookup.Result result = null;

    private AccountsBalancesTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(AccountsBalancesTopComponent.class, "CTL_AccountsBalancesTopComponent"));
        setToolTipText(NbBundle.getMessage(AccountsBalancesTopComponent.class, "HINT_AccountsBalancesTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

        // Treetable settings
        outlineAccountsBalances.setRootVisible(false);
        outlineAccountsBalances.setPopupUsedFromTheCorner(false);

        FieldsVisibility fieldsVisibility = new FieldsVisibility();
        fieldsVisibility.setFromVisible(true);
        fieldsVisibility.setToVisible(true);
        fieldsVisibility.setByVisible(true);
        fieldsVisibility.setCurrencyVisible(true);
        fieldsVisibility.setAccountsVisible(true);

        associateLookup(Lookups.singleton(fieldsVisibility));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneAccountsBalances = new javax.swing.JScrollPane();
        outlineAccountsBalances = new org.netbeans.swing.outline.Outline();

        jScrollPaneAccountsBalances.setViewportView(outlineAccountsBalances);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneAccountsBalances, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneAccountsBalances, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPaneAccountsBalances;
    private org.netbeans.swing.outline.Outline outlineAccountsBalances;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized AccountsBalancesTopComponent getDefault() {
        if (instance == null) {
            instance = new AccountsBalancesTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the AccountsBalancesTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized AccountsBalancesTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(AccountsBalancesTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof AccountsBalancesTopComponent) {
            return (AccountsBalancesTopComponent) win;
        }
        Logger.getLogger(AccountsBalancesTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // Register lookup listener
        Lookup.Template<SearchFilter> tpl = new Lookup.Template<SearchFilter>(SearchFilter.class);
        result = WindowManager.getDefault().findTopComponent("SearchFilterTopComponent").getLookup().lookup(tpl);
        if (result != null) {
            result.addLookupListener(this);
        }
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;
    }

    @Override
    protected void componentActivated() {
        super.componentActivated();
        TopComponentGroup accountsBalancesGroup = WindowManager.getDefault().findTopComponentGroup("AccountsBalancesGroup");
        if (accountsBalancesGroup == null) {
            return;
        }
        accountsBalancesGroup.open();
    }

    @Override
    protected void componentHidden() {
        super.componentDeactivated();
        TopComponentGroup accountsBalancesGroup = WindowManager.getDefault().findTopComponentGroup("AccountsBalancesGroup");
        if (accountsBalancesGroup == null) {
            return;
        }
        accountsBalancesGroup.close();
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Lookup.Result r = (Lookup.Result) ev.getSource();
        @SuppressWarnings("unchecked")
        List<SearchFilter> searchFilters = (List<SearchFilter>) r.allInstances();
        if (!searchFilters.isEmpty()) {
            displayData(searchFilters);
        }
    }

    private void displayData(List<SearchFilter> searchFilters) {
        System.out.println("display data!");
        // Prepare treetable
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(); // Root (Not displayed)
        Map<MoneyContainer, Map<SearchFilter, String>> balances =
                new HashMap<MoneyContainer, Map<SearchFilter, String>>(); // Map of currency/account and corresponding balance

        for (Currency currency : Datamodel.getCurrencies()) {
            if (currency.getActive() &&
                    (!searchFilters.get(0).hasCurrencyFilter() ||
                    (searchFilters.get(0).hasCurrencyFilter() && searchFilters.get(0).getCurrency().compareTo(currency) == 0))) {
                // Add currency to the tree
                DefaultMutableTreeNode currencyNode = new DefaultMutableTreeNode(currency);
                rootNode.add(currencyNode);

                // Compute the currency balances for each search filter
                Map<SearchFilter, String> currencyBalances = new HashMap<SearchFilter, String>();
                for (SearchFilter searchFilter : searchFilters) {
                    SearchFilter newSearchFilter = new SearchFilter();
                    newSearchFilter.setCurrency(currency);
                    newSearchFilter.setAccounts(null);

                    currencyBalances.put(searchFilter, Datamodel.getBalanceUntil(newSearchFilter).add(currency.getInitialAmount()).toString());
                }
                balances.put(currency, currencyBalances);

                // Compute the accounts' balances for each search filter
                for (Account account : currency.getAccounts()) {
                    if (account.getActive() &&
                            (!searchFilters.get(0).hasAccountsFilter() ||
                            (searchFilters.get(0).hasAccountsFilter() && searchFilters.get(0).getAccounts().contains(account)))) {
                        // Add account to the tree
                        DefaultMutableTreeNode accountNode = new DefaultMutableTreeNode(account);
                        currencyNode.add(accountNode);

                        // Compute the accounts' balances for each search filter
                        Map<SearchFilter, String> accountBalances = new HashMap<SearchFilter, String>();
                        for (SearchFilter searchFilter : searchFilters) {
                            SearchFilter newSearchFilter = new SearchFilter();
                            newSearchFilter.setCurrency(currency);
                            List<Account> accounts = new ArrayList<Account>();
                            accounts.add(account);
                            newSearchFilter.setAccounts(accounts);
                            newSearchFilter.setPeriod(searchFilter.getPeriod());
                            accountBalances.put(searchFilter, Datamodel.getBalanceUntil(newSearchFilter).add(account.getInitialAmount()).toString());
                        }
                        balances.put(account, accountBalances);
                    }
                }
            }
        }

        DefaultTreeModel treeModel = new DefaultTreeModel(rootNode);

        OutlineModel outlineModel = DefaultOutlineModel.createOutlineModel(
                treeModel, new AccountsBalancesRowModel(searchFilters, balances, searchFilters.get(0).hasAccountsFilter()), true, "Account");
        outlineAccountsBalances.setModel(outlineModel);

        for (int i = 0; i < rootNode.getChildCount(); i++) {
            outlineAccountsBalances.expandPath(new TreePath(((DefaultMutableTreeNode) rootNode.getChildAt(i)).getPath()));
        }

    }

    private class AccountsBalancesRowModel implements RowModel {

        private List<SearchFilter> searchFilters;
        private Map<MoneyContainer, Map<SearchFilter, String>> balances;
        private boolean accountFilter;

        public AccountsBalancesRowModel(List<SearchFilter> searchFilters, Map<MoneyContainer, Map<SearchFilter, String>> balances, boolean accountFilter) {
            if (searchFilters == null) {
                throw new IllegalArgumentException("The parameter 'searchFilters' is null");
            }
            if (balances == null) {
                throw new IllegalArgumentException("The parameter 'balances' is null");
            }
            this.searchFilters = searchFilters;
            this.balances = balances;
            this.accountFilter = accountFilter;
        }

        @Override
        public Class getColumnClass(int column) {
            return String.class;
        }

        @Override
        public int getColumnCount() {
            return searchFilters.size();
        }

        @Override
        public String getColumnName(int column) {
            return searchFilters.get(column).getPeriod().toString();
        }

        @Override
        public Object getValueFor(Object node, int column) {
            Object nodeInfo = ((DefaultMutableTreeNode) node).getUserObject();

            if (accountFilter && nodeInfo instanceof Currency) {
                return "";
            }

            if (nodeInfo != null) {
                MoneyContainer moneyContainer = (MoneyContainer) nodeInfo;
                SearchFilter searchFilter = searchFilters.get(column);
                return balances.get(moneyContainer).get(searchFilter);
            }
            return null;
        }

        @Override
        public boolean isCellEditable(Object node, int column) {
            return false;
        }

        @Override
        public void setValueFor(Object node, int column, Object value) {
        }
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return AccountsBalancesTopComponent.getDefault();
        }
    }
}
