/*
 * Category.java
 *
 * Copyright (C) 2009 Francois Duchemin
 *
 * This file is part of GrisbiGraphs.
 *
 * GrisbiGraphs is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * GrisbiGraphs is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GrisbiGraphs; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
package gg.db.entities;

import java.util.Set;

/**
 * <B>Category</B>
 * <UL>
 * <LI>A category permits to categorize a transaction</LI>
 * <LI>A category can have sub-categories</LI>
 * <LI>A category is identified by its ID: this ID is automatically generated by Derby</LI>
 * </UL>
 * @author Francois Duchemin
 */
public class Category {

    /** ID of the category (automatically generated by Derby) */
    private Long id;
    /** Category ID in the Grisbi file */
    private Long grisbiCategoryId;
    /** Sub-category ID in the Grisbi file */
    private Long grisbiSubCategoryId;
    /** Name of the category */
    private String name;
    /** Parent of the category for the sub-categories (null for top categories) */
    private Category parentCategory;
    /** Sub-categories */
    private Set<Category> subCategories;
    /** System property (category created by the system: transfer, breakdown, nocategory) */
    private Boolean systemProperty;
    /** Category 'Transfer': transfer between two transactions */
    public static final Category TRANSFER = new Category(-10L, -10L, "Transfer", null, true);
    /** Category 'Breakdown of transactions', when a transaction contains sub-transactions */
    public static final Category BREAKDOWN_OF_TRANSACTIONS = new Category(-30L, -30L, "Breakdown", null, true);
    /** This constant permits to search for transactions, which have no category */
    public static final Category NO_CATEGORY = new Category(-40L, -40L, "NO_CATEGORY", null, true);

    /** Creates a new instance of Category */
    public Category() {
    }

    /**
     * Creates a new instance of Category
     * @param grisbiCategoryId Category ID from the Grisbi file
     * @param grisbiSubCategoryId Sub-category ID from the Grisbi file
     * @param name Name of the category
     * @param parentCategory Parent of the category (null if the current category is a top category)
     * @param systemProperty Is the category a system category (i.e. transfer, breakdown of transactions, no category)?
     */
    public Category(Long grisbiCategoryId, Long grisbiSubCategoryId, String name, Category parentCategory, Boolean systemProperty) {
        setGrisbiCategoryId(grisbiCategoryId);
        setGrisbiSubCategoryId(grisbiSubCategoryId);
        setName(name);
        setParentCategory(parentCategory);
        setSystemProperty(systemProperty);
    }

    /**
     * Gets the ID of the category
     * @return ID of the category (automatically generated by Derby)
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the ID of the category
     * @param id ID of the category (this ID is automatically generated by Derby)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("The parameter 'id' is null");
        }
        this.id = id;
    }

    /**
     * Gets the Grisbi's category ID
     * @return Grisbi's category ID
     */
    public Long getGrisbiCategoryId() {
        return grisbiCategoryId;
    }

    /**
     * Sets the Grisbi's category ID
     * @param grisbiCategoryId Grisbi's category ID
     */
    public void setGrisbiCategoryId(Long grisbiCategoryId) {
        if (grisbiCategoryId == null) {
            throw new IllegalArgumentException("The parameter 'grisbiCategoryId' is null");
        }
        this.grisbiCategoryId = grisbiCategoryId;
    }

    /**
     * Gets the Grisbi's sub-category ID
     * @return Grisbi's sub-category ID
     */
    public Long getGrisbiSubCategoryId() {
        return grisbiSubCategoryId;
    }

    /**
     * Sets the Grisbi's sub-category ID
     * @param grisbiSubCategoryId Grisbi's sub-category ID
     */
    public void setGrisbiSubCategoryId(Long grisbiSubCategoryId) {
        if (grisbiSubCategoryId == null) {
            throw new IllegalArgumentException("The parameter 'grisbiSubCategoryId' is null");
        }
        this.grisbiSubCategoryId = grisbiSubCategoryId;
    }

    /**
     * Gets the name of the category
     * @return Name of the category
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the category
     * @param name Name of the category
     */
    public void setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("The parameter 'name' is null");
        }
        this.name = name;
    }

    /**
     * Gets the parent category
     * @return Parent category
     */
    public Category getParentCategory() {
        return parentCategory;
    }

    /**
     * Sets the parent category (for sub-categories)
     * @param parentCategory Parent category of the current category
     */
    public void setParentCategory(Category parentCategory) {
        this.parentCategory = parentCategory;
    }

    /**
     * Gets the sub-categories of the current category
     * @return sub-categories
     */
    public Set<Category> getSubCategories() {
        return subCategories;
    }

    /**
     * Sets the sub-categories of the current category
     * @param subCategories the sub-categories to set
     */
    public void setSubCategories(Set<Category> subCategories) {
        if (subCategories == null) {
            throw new IllegalArgumentException("The parameter 'subCategories' is null");
        }
        this.subCategories = subCategories;
    }

    /**
     * Is the category a system category?
     * @return true if the category is a system category (i.e. transfer, breakdown...), false otherwise
     */
    public Boolean getSystemProperty() {
        return systemProperty;
    }

    /**
     * Sets the system property
     * @param systemProperty true if the category is a system category (i.e. transfer, breakdown...)
     */
    public void setSystemProperty(Boolean systemProperty) {
        this.systemProperty = systemProperty;
    }

    /**
     * Is the current category a top category?<BR/>
     * A category is a <B>top category</B> when it has no parent's category
     * @return true if the current categry is a top category, false otherwise
     */
    public boolean isTopCategory() {
        return (parentCategory == null);
    }

    /**
     * Compare categories
     * @param category Category to compare (cannot be null)
     * @return 0 if the two categories have the same IDs
     */
    public int compareTo(Category category) {
        if (category == null) {
            throw new IllegalArgumentException("The parameter 'category' is null");
        }

        assert (category.getGrisbiCategoryId() != null && category.getGrisbiSubCategoryId() != null &&
                grisbiCategoryId != null && grisbiSubCategoryId != null);

        // Same objects
        if (this == category) {
            return 0;
        }

        return (category.getGrisbiCategoryId().compareTo(grisbiCategoryId) +
                category.getGrisbiSubCategoryId().compareTo(grisbiSubCategoryId));
    }

    /**
     * Compare categories
     * @param category Category to compare (cannot be null)
     * @return 0 if the two categories have the same IDs
     */
    @Override
    public boolean equals(Object category) {
        if (this == category) {
            return true;
        }

        // Same objects
        if (!(category instanceof Category)) {
            return false;
        }

        return (((Category) category).getGrisbiCategoryId().compareTo(grisbiCategoryId) == 0 &&
                ((Category) category).getGrisbiSubCategoryId().compareTo(grisbiSubCategoryId) == 0);
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 29 * hash + (this.grisbiCategoryId != null ? this.grisbiCategoryId.hashCode() : 0);
        hash = 29 * hash + (this.grisbiSubCategoryId != null ? this.grisbiSubCategoryId.hashCode() : 0);
        return hash;
    }

    /**
     * Gets the name of the category
     * @return Name of the category
     */
    @Override
    public String toString() {
        assert (name != null);
        return name;
    }
}
