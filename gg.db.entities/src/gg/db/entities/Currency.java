/*
 * Currency.java
 *
 * Copyright (C) 2009 Francois Duchemin
 *
 * This file is part of GrisbiGraphs.
 *
 * GrisbiGraphs is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * GrisbiGraphs is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GrisbiGraphs; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
package gg.db.entities;

import java.math.BigDecimal;
import java.util.Set;

/**
 * <B>Currency</B>
 * <UL>
 * <LI>Each account has a currency</LI>
 * <LI>A currency is identified by its ID</LI>
 * </UL>
 * @author Francois Duchemin
 */
public class Currency implements MoneyContainer {

    /** ID of the currency (generated by Grisbi) */
    private Long id;
    /** Name of the currency (i.e. "Euro", "US Dollar") */
    private String name;
    /** Code of the currency (i.e. "$") */
    private String code;
    /** ISO Code of the currency (i.e. "EUR", "USD") */
    private String isoCode;
    /** Initial amount on the currency */
    private BigDecimal initialAmount;
    /** Current balance */
    private BigDecimal balance;
    /** Is the currency active (does it contains active accounts) */
    private Boolean active;
    /** List of accounts that have the currency */
    private Set<Account> accounts;

    /** Creates a new instance of Currency */
    public Currency() {
    }

    /**
     * Creates a new instance of Currency
     * @param id ID of the currency (generated by Grisbi)
     * @param name Name of the currency ; i.e. "Euro", "US Dollar"
     * @param code Code of the currency  ; i.e. "$"
     * @param isoCode ISO Code of the currency ; i.e. "EUR", "USD"
     * @param initialAmount Initial amount of the account
     * @param balance Current balance of the currency
     * @param active Is the currency active (does it contain active accounts?)
     */
    public Currency(Long id, String name, String code, String isoCode, BigDecimal initialAmount, BigDecimal balance, Boolean active) {
        setId(id);
        setName(name);
        setCode(code);
        setIsoCode(isoCode);
        setInitialAmount(initialAmount);
        setBalance(balance);
        setActive(active);
    }

    /**
     * Gets the ID of the currency
     * @return ID of the currency (generated by Grisbi)
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the ID of the currency
     * @param id ID of the currency (generated by Grisbi)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("The parameter 'id' is null");
        }
        this.id = id;
    }

    /**
     * Gets the name of the currency
     * @return Name of the currency
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the currency
     * @param name Name of the currency
     */
    public void setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("The parameter 'name' is null");
        }
        this.name = name;
    }

    /**
     * Gets the code of the currency (i.e. "$")
     * @return Code of the currency
     */
    public String getCode() {
        return code;
    }

    /**
     * Sets the code of the currency (i.e. "$")
     * @param code Code of the currency
     */
    public void setCode(String code) {
        if (code == null) {
            throw new IllegalArgumentException("The parameter 'code' is null");
        }
        this.code = code;
    }

    /**
     * Gets the ISO code of the currency (i.e. "EUR", "USD")
     * @return ISO Code of the currency
     */
    public String getIsoCode() {
        return isoCode;
    }

    /**
     * Sets the ISO code of the currency (i.e. "EUR", "USD")
     * @param isoCode ISO Code of the currency
     */
    public void setIsoCode(String isoCode) {
        if (isoCode == null) {
            throw new IllegalArgumentException("The parameter 'isoCode' is null");
        }
        this.isoCode = isoCode;
    }

    /**
     * Gets the initial amount of the currency
     * @return Initial amount of the currency
     */
    public BigDecimal getInitialAmount() {
        return initialAmount;
    }

    /**
     * Sets the initial amount of the currency
     * @param initialAmount Initial amount of the currency
     */
    public void setInitialAmount(BigDecimal initialAmount) {
        if (initialAmount == null) {
            throw new IllegalArgumentException("The parameter 'initialAmount' is null");
        }
        this.initialAmount = initialAmount;
    }

    /**
     * Gets the balance of the currency
     * @return Balance of the currency
     */
    @Override
    public BigDecimal getBalance() {
        return balance;
    }

    /**
     * Sets the balance of the currency
     * @param balance Balance of the currency
     */
    public void setBalance(BigDecimal balance) {
        if (balance == null) {
            throw new IllegalArgumentException("The parameter 'balance' is null");
        }
        this.balance = balance;
    }

    /**
     * Is the currency active ?
     * @return true if the currency contains accounts that are active (not closed), false otherwise
     */
    public Boolean getActive() {
        return active;
    }

    /**
     * Sets the active status of the currency
     * @param active true if the currency contains accounts that are active (not closed), false otherwise
     */
    public void setActive(Boolean active) {
        this.active = active;
    }

    /**
     * Gets the list of accounts that belong to the currency
     * @return Accounts that belong to the currency
     */
    public Set<Account> getAccounts() {
        return accounts;
    }

    /**
     * Sets the list of accounts that belong to the currency
     * @param accounts The list of accounts to set
     */
    public void setAccounts(Set<Account> accounts) {
        if (accounts == null) {
            throw new IllegalArgumentException("The parameter 'accounts' is null");
        }
        this.accounts = accounts;
    }

    /**
     * Compare currencies
     * @param currency Currency to compare
     * @return 0 if the two currencies' IDs are identic
     */
    public int compareTo(Currency currency) {
        if (currency == null) {
            throw new IllegalArgumentException("The parameter 'currency' is null");
        }

        // Same objects
        if (this == currency) {
            return 0;
        }

        // Compare the IDs of both currencies
        return (currency.getId().compareTo(id));
    }

    /**
     * Gets the name of the currency
     * @return Name of the currency
     */
    @Override
    public String toString() {
        assert (name != null);
        return name;
    }
}
