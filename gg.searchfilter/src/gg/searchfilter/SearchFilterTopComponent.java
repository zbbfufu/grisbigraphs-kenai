/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gg.searchfilter;

import gg.application.components.FieldsVisibility;
import gg.db.datamodel.Datamodel;
import gg.db.datamodel.Period;
import gg.db.datamodel.PeriodType;
import gg.db.datamodel.Periods;
import gg.db.datamodel.SearchFilter;
import gg.db.entities.Account;
import gg.db.entities.Category;
import gg.db.entities.Currency;
import gg.db.entities.Payee;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import org.joda.time.LocalDate;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
final class SearchFilterTopComponent extends TopComponent implements LookupListener {

    private static SearchFilterTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "gg/resources/icons/SearchFilter.png";
    private static final String PREFERRED_ID = "SearchFilterTopComponent";
    private InstanceContent content = new InstanceContent();
    private DefaultListModel listModelAccounts = new DefaultListModel();
    private DefaultListModel listModelCategories = new DefaultListModel();
    private DefaultListModel listModelPayees = new DefaultListModel();
    private Lookup.Result result = null;

    private SearchFilterTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(SearchFilterTopComponent.class, "CTL_SearchFilterTopComponent"));
        setToolTipText(NbBundle.getMessage(SearchFilterTopComponent.class, "HINT_SearchFilterTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

        associateLookup(new AbstractLookup(content));

        jListAccounts.setModel(listModelAccounts);
        jListCategories.setModel(listModelCategories);
        jListPayees.setModel(listModelPayees);

        // Remove the link panel (today is...) from the date picker controls
        jXDatePickerFrom.setLinkPanel(null);
        jXDatePickerTo.setLinkPanel(null);

        loadComboboxes();
    }

    /** Loads the "type of graph" and the "type of period" comboboxes */
    private void loadComboboxes() {
        // combobox "period type"
        jComboBoxBy.removeAllItems();
        jComboBoxBy.addItem(PeriodType.DAY);
        jComboBoxBy.addItem(PeriodType.WEEK);
        jComboBoxBy.addItem(PeriodType.MONTH);
        jComboBoxBy.addItem(PeriodType.YEAR);

        // combobox "currency"
        jComboBoxCurrency.removeAllItems();
        for (Currency currency : Datamodel.getCurrencies()) {
            if (currency.getActive()) {
                jComboBoxCurrency.addItem(currency);
            }
        }

        // listbox "categories"
        listModelCategories.removeAllElements();
        for (Category category : Datamodel.getTopCategories()) {
            if (!category.getSystemProperty()) {
                listModelCategories.addElement(category);
            }
        }

        // listbox "payees"
        listModelPayees.removeAllElements();
        for (Payee payee : Datamodel.getPayees()) {
            if (!payee.getSystemProperty()) {
                listModelPayees.addElement(payee);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelFrom = new javax.swing.JPanel();
        jLabelFrom = new javax.swing.JLabel();
        jXDatePickerFrom = new org.jdesktop.swingx.JXDatePicker();
        jPanelTo = new javax.swing.JPanel();
        jLabelTo = new javax.swing.JLabel();
        jXDatePickerTo = new org.jdesktop.swingx.JXDatePicker();
        jPanelBy = new javax.swing.JPanel();
        jLabelBy = new javax.swing.JLabel();
        jComboBoxBy = new javax.swing.JComboBox();
        jPanelCurrency = new javax.swing.JPanel();
        jLabelCurrency = new javax.swing.JLabel();
        jComboBoxCurrency = new javax.swing.JComboBox();
        jPanelAccounts = new javax.swing.JPanel();
        jLabelAccounts = new javax.swing.JLabel();
        jScrollPaneAccounts = new javax.swing.JScrollPane();
        jListAccounts = new javax.swing.JList();
        jPanelCategories = new javax.swing.JPanel();
        jLabelCategories = new javax.swing.JLabel();
        jScrollPaneCategories = new javax.swing.JScrollPane();
        jListCategories = new javax.swing.JList();
        jPanelPayees = new javax.swing.JPanel();
        jLabelPayees = new javax.swing.JLabel();
        jScrollPanePayees = new javax.swing.JScrollPane();
        jListPayees = new javax.swing.JList();
        jPanelKeywords = new javax.swing.JPanel();
        jLabelKeywords = new javax.swing.JLabel();
        jTextFieldKeywords = new javax.swing.JTextField();
        jPanelSearch = new javax.swing.JPanel();
        jButtonSearch = new javax.swing.JButton();
        jPanelNoFieldsSupported = new javax.swing.JPanel();
        jLabelInformation = new javax.swing.JLabel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(jLabelFrom, org.openide.util.NbBundle.getMessage(SearchFilterTopComponent.class, "SearchFilterTopComponent.jLabelFrom.text")); // NOI18N

        javax.swing.GroupLayout jPanelFromLayout = new javax.swing.GroupLayout(jPanelFrom);
        jPanelFrom.setLayout(jPanelFromLayout);
        jPanelFromLayout.setHorizontalGroup(
            jPanelFromLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFromLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jLabelFrom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXDatePickerFrom, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelFromLayout.setVerticalGroup(
            jPanelFromLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFromLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFromLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXDatePickerFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 22, Short.MAX_VALUE)
                    .addComponent(jLabelFrom)))
        );

        add(jPanelFrom);

        org.openide.awt.Mnemonics.setLocalizedText(jLabelTo, org.openide.util.NbBundle.getMessage(SearchFilterTopComponent.class, "SearchFilterTopComponent.jLabelTo.text")); // NOI18N

        javax.swing.GroupLayout jPanelToLayout = new javax.swing.GroupLayout(jPanelTo);
        jPanelTo.setLayout(jPanelToLayout);
        jPanelToLayout.setHorizontalGroup(
            jPanelToLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelToLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jLabelTo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXDatePickerTo, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelToLayout.setVerticalGroup(
            jPanelToLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelToLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelToLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXDatePickerTo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jLabelTo)))
        );

        add(jPanelTo);

        org.openide.awt.Mnemonics.setLocalizedText(jLabelBy, org.openide.util.NbBundle.getMessage(SearchFilterTopComponent.class, "SearchFilterTopComponent.jLabelBy.text")); // NOI18N

        jComboBoxBy.setMinimumSize(new java.awt.Dimension(23, 20));

        javax.swing.GroupLayout jPanelByLayout = new javax.swing.GroupLayout(jPanelBy);
        jPanelBy.setLayout(jPanelByLayout);
        jPanelByLayout.setHorizontalGroup(
            jPanelByLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelByLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jLabelBy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxBy, 0, 200, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelByLayout.setVerticalGroup(
            jPanelByLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelByLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelByLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBy)
                    .addComponent(jComboBoxBy, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)))
        );

        add(jPanelBy);

        org.openide.awt.Mnemonics.setLocalizedText(jLabelCurrency, org.openide.util.NbBundle.getMessage(SearchFilterTopComponent.class, "SearchFilterTopComponent.jLabelCurrency.text")); // NOI18N

        jComboBoxCurrency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCurrencyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCurrencyLayout = new javax.swing.GroupLayout(jPanelCurrency);
        jPanelCurrency.setLayout(jPanelCurrencyLayout);
        jPanelCurrencyLayout.setHorizontalGroup(
            jPanelCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCurrencyLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabelCurrency)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxCurrency, 0, 200, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelCurrencyLayout.setVerticalGroup(
            jPanelCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCurrencyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxCurrency, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jLabelCurrency)))
        );

        add(jPanelCurrency);

        org.openide.awt.Mnemonics.setLocalizedText(jLabelAccounts, org.openide.util.NbBundle.getMessage(SearchFilterTopComponent.class, "SearchFilterTopComponent.jLabelAccounts.text")); // NOI18N

        jScrollPaneAccounts.setViewportView(jListAccounts);

        javax.swing.GroupLayout jPanelAccountsLayout = new javax.swing.GroupLayout(jPanelAccounts);
        jPanelAccounts.setLayout(jPanelAccountsLayout);
        jPanelAccountsLayout.setHorizontalGroup(
            jPanelAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAccountsLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabelAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneAccounts, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelAccountsLayout.setVerticalGroup(
            jPanelAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAccountsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneAccounts, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                    .addGroup(jPanelAccountsLayout.createSequentialGroup()
                        .addComponent(jLabelAccounts)
                        .addContainerGap())))
        );

        jLabelAccounts.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(SearchFilterTopComponent.class, "SearchFilterTopComponent.jLabelAccounts.AccessibleContext.accessibleName")); // NOI18N

        add(jPanelAccounts);

        org.openide.awt.Mnemonics.setLocalizedText(jLabelCategories, org.openide.util.NbBundle.getMessage(SearchFilterTopComponent.class, "SearchFilterTopComponent.jLabelCategories.text")); // NOI18N

        jScrollPaneCategories.setViewportView(jListCategories);

        javax.swing.GroupLayout jPanelCategoriesLayout = new javax.swing.GroupLayout(jPanelCategories);
        jPanelCategories.setLayout(jPanelCategoriesLayout);
        jPanelCategoriesLayout.setHorizontalGroup(
            jPanelCategoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCategoriesLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabelCategories)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneCategories, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelCategoriesLayout.setVerticalGroup(
            jPanelCategoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCategoriesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCategoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneCategories, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                    .addGroup(jPanelCategoriesLayout.createSequentialGroup()
                        .addComponent(jLabelCategories)
                        .addContainerGap())))
        );

        add(jPanelCategories);

        org.openide.awt.Mnemonics.setLocalizedText(jLabelPayees, org.openide.util.NbBundle.getMessage(SearchFilterTopComponent.class, "SearchFilterTopComponent.jLabelPayees.text")); // NOI18N

        jScrollPanePayees.setViewportView(jListPayees);

        javax.swing.GroupLayout jPanelPayeesLayout = new javax.swing.GroupLayout(jPanelPayees);
        jPanelPayees.setLayout(jPanelPayeesLayout);
        jPanelPayeesLayout.setHorizontalGroup(
            jPanelPayeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPayeesLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabelPayees)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPanePayees, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelPayeesLayout.setVerticalGroup(
            jPanelPayeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPayeesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPayeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPanePayees, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                    .addGroup(jPanelPayeesLayout.createSequentialGroup()
                        .addComponent(jLabelPayees)
                        .addContainerGap())))
        );

        add(jPanelPayees);

        org.openide.awt.Mnemonics.setLocalizedText(jLabelKeywords, org.openide.util.NbBundle.getMessage(SearchFilterTopComponent.class, "SearchFilterTopComponent.jLabelKeywords.text")); // NOI18N

        jTextFieldKeywords.setText(org.openide.util.NbBundle.getMessage(SearchFilterTopComponent.class, "SearchFilterTopComponent.jTextFieldKeywords.text")); // NOI18N

        javax.swing.GroupLayout jPanelKeywordsLayout = new javax.swing.GroupLayout(jPanelKeywords);
        jPanelKeywords.setLayout(jPanelKeywordsLayout);
        jPanelKeywordsLayout.setHorizontalGroup(
            jPanelKeywordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelKeywordsLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabelKeywords)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldKeywords, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelKeywordsLayout.setVerticalGroup(
            jPanelKeywordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelKeywordsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelKeywordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldKeywords, javax.swing.GroupLayout.PREFERRED_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jLabelKeywords)))
        );

        add(jPanelKeywords);

        org.openide.awt.Mnemonics.setLocalizedText(jButtonSearch, org.openide.util.NbBundle.getMessage(SearchFilterTopComponent.class, "SearchFilterTopComponent.jButtonSearch.text")); // NOI18N
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelSearchLayout = new javax.swing.GroupLayout(jPanelSearch);
        jPanelSearch.setLayout(jPanelSearchLayout);
        jPanelSearchLayout.setHorizontalGroup(
            jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSearchLayout.createSequentialGroup()
                .addContainerGap(265, Short.MAX_VALUE)
                .addComponent(jButtonSearch)
                .addContainerGap())
        );
        jPanelSearchLayout.setVerticalGroup(
            jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonSearch)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        add(jPanelSearch);

        org.openide.awt.Mnemonics.setLocalizedText(jLabelInformation, org.openide.util.NbBundle.getMessage(SearchFilterTopComponent.class, "SearchFilterTopComponent.jLabelInformation.text")); // NOI18N

        javax.swing.GroupLayout jPanelNoFieldsSupportedLayout = new javax.swing.GroupLayout(jPanelNoFieldsSupported);
        jPanelNoFieldsSupported.setLayout(jPanelNoFieldsSupportedLayout);
        jPanelNoFieldsSupportedLayout.setHorizontalGroup(
            jPanelNoFieldsSupportedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNoFieldsSupportedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelInformation, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelNoFieldsSupportedLayout.setVerticalGroup(
            jPanelNoFieldsSupportedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNoFieldsSupportedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelInformation)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        add(jPanelNoFieldsSupported);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        Currency selectedCurrency = null;
        List<Account> selectedAccounts = new ArrayList<Account>();
        List<Category> selectedCategories = new ArrayList<Category>();
        List<Payee> selectedPayees = new ArrayList<Payee>();
        List<String> enteredKeywords = new ArrayList<String>();
        List<SearchFilter> searchFilters = new ArrayList<SearchFilter>();

        if (jXDatePickerFrom.getDate() == null) {
            // 'from' date has not been entered
            NotifyDescriptor d = new NotifyDescriptor.Message(
                    "Please enter a date in the field 'from'",
                    NotifyDescriptor.WARNING_MESSAGE);
            d.setTitle("Period invalid");
            DialogDisplayer.getDefault().notify(d);
            return;
        } else if (jXDatePickerTo.getDate() == null) {
            // 'to' date has not been entered
            NotifyDescriptor d = new NotifyDescriptor.Message(
                    "Please enter a date in the field 'to'",
                    NotifyDescriptor.WARNING_MESSAGE);
            d.setTitle("Period invalid");
            DialogDisplayer.getDefault().notify(d);
            return;
        } else {
            // Get the 'from' and 'to' dates
            LocalDate from = new LocalDate(jXDatePickerFrom.getDate());
            LocalDate to = new LocalDate(jXDatePickerTo.getDate());

            // Check that 'from' is before 'to'
            if (from.compareTo(to) > 0) {
                NotifyDescriptor d = new NotifyDescriptor.Message(
                        "The entered period is not valid.\n" +
                        "'From' should be before 'To'.",
                        NotifyDescriptor.WARNING_MESSAGE);
                d.setTitle("Period invalid");
                DialogDisplayer.getDefault().notify(d);
                return;
            }

            // Get 'by' (day, week, month, year)
            assert (jComboBoxBy.getSelectedIndex() != -1);
            PeriodType periodType = (PeriodType) jComboBoxBy.getSelectedItem();
            Periods periods = new Periods(from, to, periodType);

            // Check the number of periods
            if (periods.getPeriods().size() > 10) {
                NotifyDescriptor d = new NotifyDescriptor.Message(
                        "Only 10 periods can be displayed: please enter new dates",
                        NotifyDescriptor.WARNING_MESSAGE);
                d.setTitle("Period invalid");
                DialogDisplayer.getDefault().notify(d);
                return;
            }

            // Get selected currency
            Object selectedCurrencyObject = jComboBoxCurrency.getSelectedItem();
            selectedCurrency = (Currency) selectedCurrencyObject;

            // Get selected accounts
            int[] selectedAccountsIndices = jListAccounts.getSelectedIndices();
            for (int i = 0; i < selectedAccountsIndices.length; i++) {
                Object selectedAccountObject = jListAccounts.getModel().getElementAt(selectedAccountsIndices[i]);
                selectedAccounts.add((Account) selectedAccountObject);
            }

            // Get selected categories
            int[] selectedCategoriesIndices = jListCategories.getSelectedIndices();
            for (int i = 0; i < selectedCategoriesIndices.length; i++) {
                Object selectedCategoryObject = jListCategories.getModel().getElementAt(selectedCategoriesIndices[i]);
                selectedCategories.add((Category) selectedCategoryObject);
            }

            // Get selected payees
            int[] selectedPayeesIndices = jListPayees.getSelectedIndices();
            for (int i = 0; i < selectedPayeesIndices.length; i++) {
                Object selectedPayeeObject = jListPayees.getModel().getElementAt(selectedPayeesIndices[i]);
                selectedPayees.add((Payee) selectedPayeeObject);
            }

            // Get selected keywords
            String keywords = jTextFieldKeywords.getText();
            if (keywords.compareTo("") != 0) {
                String[] keywordsSplit = keywords.split(" ");
                for (int i = 0; i < keywordsSplit.length; i++) {
                    enteredKeywords.add(keywordsSplit[i]);
                }
            }

            // Create the search filters (one for each period)
            for (Period period : periods.getPeriods()) {
                SearchFilter searchFilter = new SearchFilter();

                searchFilter.setPeriod(period);
                searchFilter.setCurrency(selectedCurrency);
                searchFilter.setAccounts(selectedAccounts);
                searchFilter.setCategories(selectedCategories);
                searchFilter.setPayees(selectedPayees);
                searchFilter.setKeywords(enteredKeywords);
                searchFilter.setIncludeTransferTransactions(true);

                searchFilters.add(searchFilter);
            }

            // Put the list of SearchFilter in the lookup of the TC
            content.set(searchFilters, null);
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jComboBoxCurrencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCurrencyActionPerformed
        // Filter accounts on the selected currency
        listModelAccounts.clear();

        Object selectedCurrencyObject = jComboBoxCurrency.getSelectedItem();

        if (selectedCurrencyObject != null) { // Currency selected
            Currency selectedCurrency = (Currency) selectedCurrencyObject;
            // Display accounts that belong to the selected currency
            for (Account account : selectedCurrency.getAccounts()) {
                if (account.getActive()) {
                    listModelAccounts.addElement(account);
                }
            }
        }
    }//GEN-LAST:event_jComboBoxCurrencyActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JComboBox jComboBoxBy;
    private javax.swing.JComboBox jComboBoxCurrency;
    private javax.swing.JLabel jLabelAccounts;
    private javax.swing.JLabel jLabelBy;
    private javax.swing.JLabel jLabelCategories;
    private javax.swing.JLabel jLabelCurrency;
    private javax.swing.JLabel jLabelFrom;
    private javax.swing.JLabel jLabelInformation;
    private javax.swing.JLabel jLabelKeywords;
    private javax.swing.JLabel jLabelPayees;
    private javax.swing.JLabel jLabelTo;
    private javax.swing.JList jListAccounts;
    private javax.swing.JList jListCategories;
    private javax.swing.JList jListPayees;
    private javax.swing.JPanel jPanelAccounts;
    private javax.swing.JPanel jPanelBy;
    private javax.swing.JPanel jPanelCategories;
    private javax.swing.JPanel jPanelCurrency;
    private javax.swing.JPanel jPanelFrom;
    private javax.swing.JPanel jPanelKeywords;
    private javax.swing.JPanel jPanelNoFieldsSupported;
    private javax.swing.JPanel jPanelPayees;
    private javax.swing.JPanel jPanelSearch;
    private javax.swing.JPanel jPanelTo;
    private javax.swing.JScrollPane jScrollPaneAccounts;
    private javax.swing.JScrollPane jScrollPaneCategories;
    private javax.swing.JScrollPane jScrollPanePayees;
    private javax.swing.JTextField jTextFieldKeywords;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerFrom;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerTo;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized SearchFilterTopComponent getDefault() {
        if (instance == null) {
            instance = new SearchFilterTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the SearchFilterTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized SearchFilterTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(SearchFilterTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof SearchFilterTopComponent) {
            return (SearchFilterTopComponent) win;
        }
        Logger.getLogger(SearchFilterTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        Lookup.Template<FieldsVisibility> tpl = new Lookup.Template<FieldsVisibility>(FieldsVisibility.class);
        result = Utilities.actionsGlobalContext().lookup(tpl);
        result.addLookupListener(this);

        resultChanged(null);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public void resultChanged(LookupEvent ev) {
        Collection instances = result.allInstances();

        if (!instances.isEmpty()) {
            FieldsVisibility fieldsVisibility = (FieldsVisibility) instances.iterator().next();

            jPanelFrom.setVisible(fieldsVisibility.isFromVisible());
            jPanelTo.setVisible(fieldsVisibility.isToVisible());
            jPanelBy.setVisible(fieldsVisibility.isByVisible());
            jPanelCurrency.setVisible(fieldsVisibility.isCurrencyVisible());
            jPanelAccounts.setVisible(fieldsVisibility.isAccountsVisible());
            jPanelCategories.setVisible(fieldsVisibility.isCategoriesVisible());
            jPanelPayees.setVisible(fieldsVisibility.isPayeesVisible());
            jPanelKeywords.setVisible(fieldsVisibility.isKeywordsVisible());

            if (fieldsVisibility.isFromVisible() || fieldsVisibility.isToVisible() ||
                    fieldsVisibility.isByVisible() || fieldsVisibility.isCurrencyVisible() ||
                    fieldsVisibility.isAccountsVisible() || fieldsVisibility.isCategoriesVisible() ||
                    fieldsVisibility.isPayeesVisible() || fieldsVisibility.isKeywordsVisible()) {
                jPanelSearch.setVisible(true);
                jPanelNoFieldsSupported.setVisible(false);
            } else {
                jPanelSearch.setVisible(false);
                jPanelNoFieldsSupported.setVisible(true);
            }
        }
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return SearchFilterTopComponent.getDefault();
        }
    }
}
