/*
 * OverviewTopComponent.java
 *
 * Copyright (C) 2009 Francois Duchemin
 *
 * This file is part of GrisbiGraphs.
 *
 * GrisbiGraphs is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * GrisbiGraphs is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GrisbiGraphs; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
package gg.view.overview;

import gg.searchfilter.FieldsVisibility;
import gg.db.entities.Account;
import gg.db.entities.Currency;
import gg.db.entities.FileImport;
import gg.db.entities.MoneyContainer;
import gg.options.Options;
import gg.utilities.Utilities;
import gg.wallet.Wallet;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.joda.time.format.DateTimeFormat;
import org.netbeans.swing.outline.DefaultOutlineModel;
import org.netbeans.swing.outline.OutlineModel;
import org.netbeans.swing.outline.RowModel;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.windows.TopComponentGroup;

/**
 * Top component which displays the overview
 */
public final class OverviewTopComponent extends TopComponent {

    private static OverviewTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "gg/resources/icons/Overview.png";
    private static final String PREFERRED_ID = "OverviewTopComponent";
    private FieldsVisibility fieldsVisibility = new FieldsVisibility();

    private OverviewTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(OverviewTopComponent.class, "CTL_OverviewTopComponent"));
        setToolTipText(NbBundle.getMessage(OverviewTopComponent.class, "HINT_OverviewTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

        associateLookup(Lookups.singleton(fieldsVisibility));

        outlineOverview.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        outlineOverview.setRootVisible(false);
        outlineOverview.setPopupUsedFromTheCorner(false);
        outlineOverview.setColumnHidingAllowed(false);

        displayData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneOverview = new javax.swing.JScrollPane();
        outlineOverview = new org.netbeans.swing.outline.Outline();
        jLabelGrisbiFileName = new javax.swing.JLabel();
        jTextFieldGrisbiFileName = new javax.swing.JTextField();
        jLabelLastModifiedOn = new javax.swing.JLabel();
        jTextFieldLastModifiedOn = new javax.swing.JTextField();
        jLabelImportedOn = new javax.swing.JLabel();
        jTextFieldImportedOn = new javax.swing.JTextField();

        jScrollPaneOverview.setViewportView(outlineOverview);

        org.openide.awt.Mnemonics.setLocalizedText(jLabelGrisbiFileName, org.openide.util.NbBundle.getMessage(OverviewTopComponent.class, "OverviewTopComponent.jLabelGrisbiFileName.text")); // NOI18N

        jTextFieldGrisbiFileName.setEditable(false);
        jTextFieldGrisbiFileName.setText(org.openide.util.NbBundle.getMessage(OverviewTopComponent.class, "OverviewTopComponent.jTextFieldGrisbiFileName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabelLastModifiedOn, org.openide.util.NbBundle.getMessage(OverviewTopComponent.class, "OverviewTopComponent.jLabelLastModifiedOn.text")); // NOI18N

        jTextFieldLastModifiedOn.setEditable(false);
        jTextFieldLastModifiedOn.setText(org.openide.util.NbBundle.getMessage(OverviewTopComponent.class, "OverviewTopComponent.jTextFieldLastModifiedOn.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabelImportedOn, org.openide.util.NbBundle.getMessage(OverviewTopComponent.class, "OverviewTopComponent.jLabelImportedOn.text")); // NOI18N

        jTextFieldImportedOn.setEditable(false);
        jTextFieldImportedOn.setText(org.openide.util.NbBundle.getMessage(OverviewTopComponent.class, "OverviewTopComponent.jTextFieldImportedOn.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneOverview, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelLastModifiedOn)
                            .addComponent(jLabelGrisbiFileName)
                            .addComponent(jLabelImportedOn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldLastModifiedOn)
                            .addComponent(jTextFieldImportedOn)
                            .addComponent(jTextFieldGrisbiFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldGrisbiFileName, jTextFieldImportedOn, jTextFieldLastModifiedOn});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneOverview, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelGrisbiFileName)
                    .addComponent(jTextFieldGrisbiFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelLastModifiedOn)
                    .addComponent(jTextFieldLastModifiedOn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelImportedOn)
                    .addComponent(jTextFieldImportedOn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelGrisbiFileName;
    private javax.swing.JLabel jLabelImportedOn;
    private javax.swing.JLabel jLabelLastModifiedOn;
    private javax.swing.JScrollPane jScrollPaneOverview;
    private javax.swing.JTextField jTextFieldGrisbiFileName;
    private javax.swing.JTextField jTextFieldImportedOn;
    private javax.swing.JTextField jTextFieldLastModifiedOn;
    private org.netbeans.swing.outline.Outline outlineOverview;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized OverviewTopComponent getDefault() {
        if (instance == null) {
            instance = new OverviewTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the OverviewTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized OverviewTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(OverviewTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof OverviewTopComponent) {
            return (OverviewTopComponent) win;
        }
        Logger.getLogger(OverviewTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentClosed() {
        TopComponentGroup overviewGroup = WindowManager.getDefault().findTopComponentGroup("OverviewGroup");
        if (overviewGroup != null) {
            overviewGroup.close();
        }
    }

    @Override
    protected void componentActivated() {
        super.componentActivated();
        TopComponentGroup overviewGroup = WindowManager.getDefault().findTopComponentGroup("OverviewGroup");
        if (overviewGroup != null) {
            overviewGroup.open();
        }
    }

    @Override
    protected void componentHidden() {
        super.componentDeactivated();
        TopComponentGroup overviewGroup = WindowManager.getDefault().findTopComponentGroup("OverviewGroup");
        if (overviewGroup != null) {
            overviewGroup.close();
        }
    }

    public void displayData() {
        Utilities.changeCursorWaitStatus(true);

        FileImport currentFileImport = Wallet.getInstance().getCurrentFileImport();
        if (currentFileImport != null) {
            jTextFieldGrisbiFileName.setText(currentFileImport.getFileName());
            jTextFieldGrisbiFileName.setToolTipText(currentFileImport.getFilePath());
            
            jTextFieldImportedOn.setText(currentFileImport.getImportedOn().toString("EEEE d MMMM yyyy - HH:mm"));
            jTextFieldLastModifiedOn.setText(currentFileImport.getLastModifiedOn().toString("EEEE d MMMM yyyy - HH:mm"));
        } else {
            jTextFieldGrisbiFileName.setText("");
            jTextFieldGrisbiFileName.setToolTipText("");
            jTextFieldImportedOn.setText("");
            jTextFieldLastModifiedOn.setText("");
        }

        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(); // Root (Not displayed)
        Map<MoneyContainer, BigDecimal> balances = new HashMap<MoneyContainer, BigDecimal>(); // Map of currency/account and corresponding balance

        List<Currency> currencies = Wallet.getInstance().getActiveCurrencies();
        for (Currency currency : currencies) {
            DefaultMutableTreeNode currencyNode = new DefaultMutableTreeNode(currency);
            rootNode.add(currencyNode);
            balances.put(currency, currency.getBalance());

            for (Account account : Wallet.getInstance().getActiveAccountsWithCurrency().get(currency)) {
                DefaultMutableTreeNode accountNode = new DefaultMutableTreeNode(account);
                currencyNode.add(accountNode);
                balances.put(account, account.getBalance());
            }
        }

        DefaultTreeModel treeModel = new DefaultTreeModel(rootNode);

        OutlineModel outlineModel = DefaultOutlineModel.createOutlineModel(
                treeModel, new OverviewRowModel(balances), true, "Account");

        outlineOverview.setModel(outlineModel);
        outlineOverview.setRootVisible(false);
        outlineOverview.setPopupUsedFromTheCorner(false);
        for (int i = 0; i < rootNode.getChildCount(); i++) {
            outlineOverview.expandPath(new TreePath(((DefaultMutableTreeNode) rootNode.getChildAt(i)).getPath()));
        }

        Utilities.changeCursorWaitStatus(false);

        IncomeExpensesTopComponent overviewGraph =
                (IncomeExpensesTopComponent) WindowManager.getDefault().findTopComponent("IncomeExpensesTopComponent");
        overviewGraph.displayData();
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return OverviewTopComponent.getDefault();
        }
    }

    private class OverviewRowModel implements RowModel {

        private Map<MoneyContainer, BigDecimal> balances;

        public OverviewRowModel(Map<MoneyContainer, BigDecimal> balances) {
            if (balances == null) {
                throw new IllegalArgumentException("The parameter 'balances' is null");
            }
            this.balances = balances;
        }

        @Override
        public Class getColumnClass(int column) {
            return String.class;
        }

        @Override
        public int getColumnCount() {
            return 1;
        }

        @Override
        public String getColumnName(int column) {
            return "Balance";
        }

        @Override
        public Object getValueFor(Object node, int column) {
            // Value to display in the current cell
            String value = "";

            // Get the object contained in the current cell
            Object nodeUserObject = ((DefaultMutableTreeNode) node).getUserObject();
            assert (nodeUserObject != null);

            // Display the currency or the account's balance value
            MoneyContainer moneyContainer = (MoneyContainer) nodeUserObject;

            // Display the currency or the account's balance value
            // - if the object is an account or
            // - if the object is a currency and if the user wants to see the sums
            if (moneyContainer instanceof Account || Options.calculateSums()) {
                BigDecimal moneyContainerValue = balances.get(moneyContainer);
                assert (moneyContainerValue != null);
                if (moneyContainerValue.compareTo(BigDecimal.ZERO) != 0 || Options.displayZero()) {
                    value = moneyContainerValue.toString();
                }
            }

            return value;
        }

        @Override
        public boolean isCellEditable(Object node, int column) {
            return false;
        }

        @Override
        public void setValueFor(Object node, int column, Object value) {
        }
    }
}
