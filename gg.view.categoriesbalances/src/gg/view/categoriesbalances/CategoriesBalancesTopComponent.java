/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gg.view.categoriesbalances;

import gg.application.components.FieldsVisibility;
import gg.db.datamodel.Datamodel;
import gg.db.datamodel.SearchFilter;
import gg.db.entities.Category;
import gg.utilities.Utilities;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.swing.outline.DefaultOutlineModel;
import org.netbeans.swing.outline.OutlineModel;
import org.netbeans.swing.outline.RowModel;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponentGroup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//gg.view.categoriesbalances//CategoriesBalances//EN",
autostore = false)
public final class CategoriesBalancesTopComponent extends TopComponent implements LookupListener {

    private static CategoriesBalancesTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "gg/resources/icons/CategoriesBalances.png";
    private static final String PREFERRED_ID = "CategoriesBalancesTopComponent";
    private Lookup.Result<SearchFilter> result = null;
    private List<SearchFilter> displayedSearchFilters = new ArrayList<SearchFilter>();

    public CategoriesBalancesTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(CategoriesBalancesTopComponent.class, "CTL_CategoriesBalancesTopComponent"));
        setToolTipText(NbBundle.getMessage(CategoriesBalancesTopComponent.class, "HINT_CategoriesBalancesTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

        // Treetable settings
        outlineCategoriesBalances.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        outlineCategoriesBalances.setRootVisible(false);
        outlineCategoriesBalances.setPopupUsedFromTheCorner(false);

        FieldsVisibility fieldsVisibility = new FieldsVisibility();
        fieldsVisibility.setFromVisible(true);
        fieldsVisibility.setToVisible(true);
        fieldsVisibility.setByVisible(true);
        fieldsVisibility.setCurrencyVisible(true);
        fieldsVisibility.setAccountsVisible(true);
        fieldsVisibility.setCategoriesVisible(true);

        associateLookup(Lookups.singleton(fieldsVisibility));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneCategoriesBalances = new javax.swing.JScrollPane();
        outlineCategoriesBalances = new org.netbeans.swing.outline.Outline();

        jScrollPaneCategoriesBalances.setViewportView(outlineCategoriesBalances);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneCategoriesBalances, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneCategoriesBalances, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPaneCategoriesBalances;
    private org.netbeans.swing.outline.Outline outlineCategoriesBalances;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized CategoriesBalancesTopComponent getDefault() {
        if (instance == null) {
            instance = new CategoriesBalancesTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the CategoriesBalancesTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized CategoriesBalancesTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(CategoriesBalancesTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof CategoriesBalancesTopComponent) {
            return (CategoriesBalancesTopComponent) win;
        }
        Logger.getLogger(CategoriesBalancesTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        CategoriesBalancesTopComponent singleton = CategoriesBalancesTopComponent.getDefault();
        singleton.readPropertiesImpl(p);
        return singleton;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    protected void componentActivated() {
        super.componentActivated();

        // Register lookup listener on the search filter top component
        result = WindowManager.getDefault().findTopComponent("SearchFilterTopComponent").getLookup().lookupResult(SearchFilter.class);
        result.addLookupListener(this);
        result.allInstances();
        resultChanged(null);

        TopComponentGroup categoriesBalancesGroup = WindowManager.getDefault().findTopComponentGroup("CategoriesBalancesGroup");
        if (categoriesBalancesGroup == null) {
            return;
        }
        categoriesBalancesGroup.open();
    }

    @Override
    protected void componentHidden() {
        super.componentHidden();

        // Remove listener on search filter top component
        result.removeLookupListener(this);
        result = null;

        TopComponentGroup categoriesBalancesGroup = WindowManager.getDefault().findTopComponentGroup("CategoriesBalancesGroup");
        if (categoriesBalancesGroup == null) {
            return;
        }
        categoriesBalancesGroup.close();
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        @SuppressWarnings("unchecked")
        List<SearchFilter> searchFilters = (List<SearchFilter>) result.allInstances();
        if (!searchFilters.isEmpty() && !searchFilters.equals(displayedSearchFilters)) {
            displayData(searchFilters);
        }
    }

    private boolean isCategoryToDisplay(List<Category> selectedCategories, Category category) {
        if (selectedCategories.contains(category)) {
            return true;
        }

        for (Category selectedCategory : selectedCategories) {
            if (!selectedCategory.isTopCategory()) {
                if (selectedCategory.getParentCategory().getId().compareTo(category.getId()) == 0) {
                    return true;
                }
            }
        }

        return false;
    }

    private void displayData(List<SearchFilter> searchFilters) {
        Utilities.changeCursorWaitStatus(true);

        // Prepare treetable
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(); // Root (Not displayed)
        Map<Long, Map<SearchFilter, String>> balances =
                new HashMap<Long, Map<SearchFilter, String>>(); // Map of category and corresponding balance


        // Compute the categories' balances
        for (SearchFilter searchFilter : searchFilters) {
            List categoriesBalances = Datamodel.getCategoriesBalances(searchFilter);
            Iterator results = categoriesBalances.iterator();

            while (results.hasNext()) {
                Object[] row = (Object[]) results.next();

                Long categoryId = (Long) row[0];
                BigDecimal balance = (BigDecimal) row[1];

                Map<SearchFilter, String> balancesMap = new HashMap<SearchFilter, String>();
                if (balances.get(categoryId) != null) {
                    balancesMap.putAll(balances.get(categoryId));
                }

                balancesMap.put(searchFilter, Utilities.getSignedBalance(balance));

                balances.put(categoryId, balancesMap);
            }
        }

        for (Category category : Datamodel.getTopCategories()) {
            if ((!searchFilters.get(0).hasCategoriesFilter() ||
                    (searchFilters.get(0).hasCategoriesFilter() &&
                    isCategoryToDisplay(searchFilters.get(0).getCategories(), category)))) {

                // Add category to the tree
                DefaultMutableTreeNode categoryNode = new DefaultMutableTreeNode(category);

                // Compute the sub-categories' balances for each search filter
                for (Category subCategory : Datamodel.getSubCategories(category)) {
                    if (balances.get(subCategory.getId()) != null) {
                        // Add sub-category to the tree
                        DefaultMutableTreeNode subCategoryNode = new DefaultMutableTreeNode(subCategory);
                        categoryNode.add(subCategoryNode);
                    }
                }

                if (categoryNode.getChildCount() > 0) {
                    rootNode.add(categoryNode);
                }
            }
        }

        DefaultTreeModel treeModel = new DefaultTreeModel(rootNode);

        OutlineModel outlineModel = DefaultOutlineModel.createOutlineModel(
                treeModel,
                new CategoriesBalancesRowModel(searchFilters, balances),
                true,
                "Category");
        outlineCategoriesBalances.setModel(outlineModel);

        for (int i = 0; i < rootNode.getChildCount(); i++) {
            outlineCategoriesBalances.expandPath(new TreePath(((DefaultMutableTreeNode) rootNode.getChildAt(i)).getPath()));
        }

        this.displayedSearchFilters = searchFilters;

        Utilities.changeCursorWaitStatus(false);
    }

    private class CategoriesBalancesRowModel implements RowModel {

        private List<SearchFilter> searchFilters;
        private Map<Long, Map<SearchFilter, String>> balances;

        public CategoriesBalancesRowModel(List<SearchFilter> searchFilters, Map<Long, Map<SearchFilter, String>> balances) {
            if (searchFilters == null) {
                throw new IllegalArgumentException("The parameter 'searchFilters' is null");
            }
            if (balances == null) {
                throw new IllegalArgumentException("The parameter 'balances' is null");
            }
            this.searchFilters = searchFilters;
            this.balances = balances;
        }

        @Override
        public Class getColumnClass(int column) {
            return String.class;
        }

        @Override
        public int getColumnCount() {
            return searchFilters.size();
        }

        @Override
        public String getColumnName(int column) {
            return searchFilters.get(column).getPeriod().toString();
        }

        @Override
        public Object getValueFor(Object node, int column) {
            Object nodeInfo = ((DefaultMutableTreeNode) node).getUserObject();

            if (nodeInfo != null) {
                Category category = (Category) nodeInfo;
                SearchFilter searchFilter = searchFilters.get(column);

                Long categoryId = category.getId();
                if (balances.get(categoryId) != null) {
                    return balances.get(categoryId).get(searchFilter);
                }
                return "";
            }
            return null;
        }

        @Override
        public boolean isCellEditable(Object node, int column) {
            return false;
        }

        @Override
        public void setValueFor(Object node, int column, Object value) {
        }
    }
}
